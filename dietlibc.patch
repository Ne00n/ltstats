cvs -d :pserver:cvs@cvs.fefe.de:/cvs -z9 co dietlibc && cd dietlibc && patch -p0 < ../dietlibc.patch && make -j$(nproc)
--- dietfeatures.h
+++ dietfeatures.h
@@ -10,7 +10,7 @@
  * seccomp sandboxes more platform agnostic. However, if you plan on
  * running your program on an ancient kernel, you need the socketcall
  * version instead. */
-#define WANT_I386_SOCKETCALL
+//#define WANT_I386_SOCKETCALL
 
 #define WANT_FLOATING_POINT_IN_PRINTF
 #define WANT_FLOATING_POINT_IN_SCANF
@@ -32,20 +32,20 @@
 #define SLASH_PROC_OK
 
 /* use errno_location instead of errno; NEEDED FOR MULTI-THREADING! */
-#define WANT_THREAD_SAFE
+//#define WANT_THREAD_SAFE
 
 /* support __thread; NEEDED FOR MULTI-THREADING! */
-#define WANT_TLS
+//#define WANT_TLS
 
 /* run constructors/destructors of static objects,
  * and functions with __attribute__((constructor)) */
-#define WANT_CTOR
+//#define WANT_CTOR
 
 /* call __register_frame_info so C++ exception handling works */
-#define WANT_EXCEPTIONS
+//#define WANT_EXCEPTIONS
 
 /* GDB support in the dynamic linker */
-#define WANT_LD_SO_GDB_SUPPORT
+//#define WANT_LD_SO_GDB_SUPPORT
 
 /* do you want smaller or faster string routines? */
 #define WANT_FASTER_STRING_ROUTINES
@@ -63,7 +63,7 @@
 
 /* you need to define this if you want to run your programs with large
  * file support on kernel 2.2 or 2.0 */
-#define WANT_LARGEFILE_BACKCOMPAT
+//#define WANT_LARGEFILE_BACKCOMPAT
 
 /* do you want localtime(3) to read /etc/localtime?
  * Needed for daylight saving time etc. */
@@ -106,21 +106,21 @@
 /* This enables zeroconf DNS aka Rendezvous aka Bonjour. */
 /* This code will try zeroconf DNS if you ask for host.local or if you
  * ask for an unqualified hostname */
-#define WANT_PLUGPLAY_DNS
+//#define WANT_PLUGPLAY_DNS
 
 /* This enables LLMNR, the MS variant of zeroconf DNS.  This only works
  * if you also enabled WANT_PLUGPLAY_DNS */
-#define WANT_LLMNR
+//#define WANT_LLMNR
 
 /* Uncomment this if you want DNS lookups to fail if /etc/hosts contains
  * an entry but it's for a different record type */
-/* #define WANT_HOSTS_GIVEUP_EARLY */
+#define WANT_HOSTS_GIVEUP_EARLY
 
 /* Do you want valgrind support?  If enabled, the startup code will
  * check for valgrind, and if detected, turn off optimized SIMD string
  * routines that cause false positives in valgrind.  This enlarges and
  * slightly slows down your code! */
-#define WANT_VALGRIND_SUPPORT
+//#define WANT_VALGRIND_SUPPORT
 
 /* do you want that malloc(0) return a pointer to a "zero-length" object
  * that is realloc-able; means realloc(..,size) gives a NEW object (like a
@@ -154,7 +154,7 @@
  * and program_invocation_name to be there.  This functionality is not
  * portable and adds useless bloat to libc.  Help stomp out code
  * depending on this!  util-linux, I'm looking at you here! */
-#define WANT_GNU_STARTUP_BLOAT
+//#define WANT_GNU_STARTUP_BLOAT
 
 /* Include support for ProPolice/SSP, calls guard_setup */
 /* ProPolice is part of gcc 4.1 and up, there were patches for earlier
--- libugly/gethostent.c
+++ libugly/gethostent.c
@@ -23,7 +23,7 @@
   char* last;
   char* max=buf+len;
   int aliasidx;
-  if (!hostmap) {
+  if (!hostmap || hostmap==(char*)-1) {
     int hostfd=open(_PATH_HOSTS,O_RDONLY);
     if (hostfd<0) return 0;
     hostlen=lseek(hostfd,0,SEEK_END);
